# -*- coding: utf-8 -*-
"""Человеко-машинное взаимодействие.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t4OgkR3yCuNjksoi7KYWZlDW8k7VJ7l6

# Лаба 1

1.	Выбрать набор данных, содержащий не менее 10 атрибутов из репозитория https://archive.ics.uci.edu/ml/index.php.
2.	Построить графики Matplotlib по данным выбранного датасета:
•	Histogram 
•	Scatter
•	Line
•	Bar
•	Box
•	Heatmap
•	Pie
•	Polar

**Histogram**
"""

import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')
# Data
data = []
with open('/content/drive/My Drive/auto-mpg.data', 'r') as file:
    for line in file:
      data.append(line)
    #s_f = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data', index_col=False, header=None, sep='\t')
# Extracting the first column of the data (i.e. the values to be plotted)
values = [row[0] for row in data]

# Creating histogram
plt.hist(values, bins=5)

# Setting labels and title
plt.xlabel('car information')
plt.ylabel('что-то')
plt.title('какие-то характеристики')

# Displaying the plot
plt.show()

s_f

path = 'http://archive.ics.uci.edu/ml/machine-learning-databases/image/segmentation.data'
df = pd.read_csv(path, skiprows=2, index_col=False)

df

"""**Scatter**"""

x = []
y = []
for line in data:
  x.append(line[3])
  y.append(line[0])
colors = ['g' for i in range(len(x))]
plt.scatter(x, y, c=colors)
plt.xlabel('что-то другое')
plt.ylabel('что-то')
plt.title('Scatter график')
plt.legend()
plt.show()

"""**Line**"""

x = range(len(data))
y = [row[0] for row in data]

plt.plot(x, y)
plt.xlabel('Index')
plt.ylabel('Value')
plt.title('Line Plot')
plt.show()

"""**Bar**"""

# Получение данных по оси X
x = [item[4] for item in data]

# Получение данных по оси Y
y = [item[0] for item in data]

# Создание графика
fig, ax = plt.subplots()

# Добавление данных на график
ax.bar(x, y)

# Настройка осей
ax.set_xlabel("что?")
ax.set_ylabel("что-то")
ax.set_title("Bar")

# Отображение графика
plt.show()

"""**Box**"""

# data = [
#     [18.0, 8., 307.0, 130.0, 3504., 12.0, 70., 1., "chevrolet chevelle malibu"],
#     [15.0, 8., 350.0, 165.0, 3693., 11.5, 70., 1., "buick skylark 320"],
#     [18.0, 8., 318.0, 150.0, 3436., 11.0, 70., 1., "plymouth satellite"],
#     [16.0, 8., 304.0, 150.0, 3433., 12.0, 70., 1., "amc rebel sst"],
#     [17.0, 8., 302.0, 140.0, 3449., 10.5, 70., 1., "ford torino"],
#     [15.0, 8., 429.0, 198.0, 4341., 10.0, 70., 1., "ford galaxie 500"],
#     [14.0, 8., 454.0, 220.0, 4354., 9.0, 70., 1., "chevrolet impala"],
#     [14.0, 8., 440.0, 215.0, 4312., 8.5, 70., 1., "plymouth fury iii"],
#     [14.0, 8., 455.0, 225.0, 4425., 10.0, 70., 1., "pontiac catalina"],
#     [15.0, 8., 390.0, 190.0, 3850., 8.5, 70., 1., "amc ambassador dpl"]
# ]

# Извлечение первого столбца из данных
x = range(len(data))
y = [row[0] for row in data]

# Построение графика Box
fig, ax = plt.subplots()
ax.boxplot(y)

# Настройка осей и заголовка
ax.set_xlabel('Data')
ax.set_ylabel('Values')
ax.set_title('Box Plot')

plt.show()

"""**Heatmap**
не смог построить по данным из датасета, потому как они там иногда Null,
вынес кусочек где нет проблем
"""

import pandas as pd
import matplotlib.pyplot as plt

# create matrix from data
data = [[18.0, 8., 307.0, 130.0, 3504., 12.0, 70., 1.],
        [15.0, 8., 350.0, 165.0, 3693., 11.5, 70., 1.],
        [18.0, 8., 318.0, 150.0, 3436., 11.0, 70., 1.],
        [16.0, 8., 304.0, 150.0, 3433., 12.0, 70., 1.],
        [17.0, 8., 302.0, 140.0, 3449., 10.5, 70., 1.],
        [15.0, 8., 429.0, 198.0, 4341., 10.0, 70., 1.],
        [14.0, 8., 454.0, 220.0, 4354., 9.0, 70., 1.],
        [14.0, 8., 440.0, 215.0, 4312., 8.5, 70., 1.],
        [14.0, 8., 455.0, 225.0, 4425., 10.0, 70., 1.],
        [15.0, 8., 390.0, 190.0, 3850., 8.5, 70., 1.]]
df = pd.DataFrame(data)

# create heatmap
fig, ax = plt.subplots()
im = ax.imshow(df, cmap='coolwarm')

# set x and y labels
ax.set_xticks(range(len(df.columns)))
ax.set_xticklabels(df.columns)
ax.set_yticks(range(len(df)))
ax.set_yticklabels(range(1, len(df) + 1))

# add value annotations
for i in range(len(df)):
    for j in range(len(df.columns)):
        text = ax.text(j, i, df.iloc[i, j],
                       ha="center", va="center", color="w")

# set colorbar
cbar = ax.figure.colorbar(im, ax=ax)
cbar.ax.set_ylabel("value", rotation=-90, va="bottom")

# set title and show plot
ax.set_title("Heatmap")
plt.show()

"""**Pie**
здесь нагляднее когда не 400 автомобилей, а только 10
"""

import matplotlib.pyplot as plt

data = [18.0, 15.0, 18.0, 16.0, 17.0, 15.0, 14.0, 14.0, 14.0, 15.0]
labels = ["Chevrolet Chevelle Malibu", "Buick Skylark 320", "Plymouth Satellite", 
          "AMC Rebel SST", "Ford Torino", "Ford Galaxie 500", "Chevrolet Impala",
          "Plymouth Fury III", "Pontiac Catalina", "AMC Ambassador DPL"]

fig, ax = plt.subplots()
ax.pie(data, labels=labels, autopct='%1.1f%%', startangle=90)
ax.axis('equal')
ax.set_title('Distribution of Car MPG')

plt.show()

"""**Polar**"""

import matplotlib.pyplot as plt
import numpy as np

# Data
mpg = [18.0, 15.0, 18.0, 16.0, 17.0, 15.0, 14.0, 14.0, 14.0, 15.0]
cylinders = [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
displacement = [307.0, 350.0, 318.0, 304.0, 302.0, 429.0, 454.0, 440.0, 455.0, 390.0]
horsepower = [130.0, 165.0, 150.0, 150.0, 140.0, 198.0, 220.0, 215.0, 225.0, 190.0]
weight = [3504.0, 3693.0, 3436.0, 3433.0, 3449.0, 4341.0, 4354.0, 4312.0, 4425.0, 3850.0]

# Create polar plot
fig = plt.figure(figsize=(6, 6))
ax = fig.add_subplot(111, projection='polar')

# Convert data to radians
theta = np.linspace(0, 2*np.pi, len(mpg))
mpg_r = np.array(mpg)
cylinders_r = np.array(cylinders)
displacement_r = np.array(displacement)
horsepower_r = np.array(horsepower)
weight_r = np.array(weight)

# Normalize data
mpg_r = (mpg_r - np.min(mpg_r)) / (np.max(mpg_r) - np.min(mpg_r))
cylinders_r = (cylinders_r - np.min(cylinders_r)) / (np.max(cylinders_r) - np.min(cylinders_r))
displacement_r = (displacement_r - np.min(displacement_r)) / (np.max(displacement_r) - np.min(displacement_r))
horsepower_r = (horsepower_r - np.min(horsepower_r)) / (np.max(horsepower_r) - np.min(horsepower_r))
weight_r = (weight_r - np.min(weight_r)) / (np.max(weight_r) - np.min(weight_r))

# Plot the data
ax.plot(theta, mpg_r, label='mpg')
ax.plot(theta, cylinders_r, label='cylinders')
ax.plot(theta, displacement_r, label='displacement')
ax.plot(theta, horsepower_r, label='horsepower')
ax.plot(theta, weight_r, label='weight')

# Add legend and title
ax.legend()
ax.set_title('Polar Plot')

# Show plot
plt.show()

"""# Лаба 2

подключение датасета
"""

# Импортировать необходимые библиотеки
import pandas as pd
from google.colab import drive

# Подключиться к Google Диску
drive.mount('/content/drive')

# Указать путь к CSV-файлу на Google Диске
path = '/content/drive/MyDrive/accelerometer.csv'

# Прочитать CSV-файл с помощью библиотеки Pandas
df = pd.read_csv(path)

columns = list(df.columns)

# Вывести список заголовков столбцов
print(columns)

"""Построить графики Seaborn и Plotly по данным выбранного датасета
•	Histogram 
•	Scatter
•	Line
•	Bar
•	Box
•	Heatmap
•	Pie
•	Polar
•	3D

**Histogram plotly**
"""

def hist_plotly():
  import plotly.express as px

  fig = px.histogram(df, x=[x for x in columns], nbins=20)
  fig.show()

"""**Histogram seaborn**"""

def hist_sea():
  import seaborn as sns
  # Настройки стиля графика
  sns.set_style('darkgrid')

  #число строк датафрейма
  num_rows = df.shape[0]
  # Создание гистограммы
  sns.histplot(data=df, x=[x for x in range(num_rows)], bins=30, kde=True)

"""**Scatter plotly** при запуске грузит комп, запускать последним"""

def scatter_plotly():
  # Create the scatter plot using Plotly Express
  fig = px.scatter(df, x=[x for x in range(num_rows)], y=[x for x in range(num_rows)], color=[x for x in range(num_rows)])

  # Show the plot
  fig.show()

"""**scatter seaborn**"""

def scatter_sea():
  import seaborn as sns

  # Create the scatter plot using Seaborn
  sns.scatterplot(data=df, x=[x for x in range(num_rows)], y=[x for x in range(num_rows)], hue=[x for x in range(num_rows)])

"""**Line plotly**"""

def line_plotly():
  # Create the line plot using Plotly Express
  fig = px.line(df, x=[x for x in range(num_rows)], y=[x for x in range(num_rows)])

  # Show the plot
  fig.show()

"""**Line seaborn**"""

def line_sea():
  # Create the line plot using Seaborn
  sns.lineplot(data=df, x=[x for x in range(num_rows)], y=[x for x in range(num_rows)])

"""**Bar plotly**"""

def bar_plotly():
  import plotly.graph_objs as go
  bar_color = 'rgb(254, 10, 10)'
  # Create the bar plot using Plotly graph objects
  fig = go.Figure(go.Bar(x=[x for x in range(num_rows)], y=[x for x in range(num_rows)], marker=dict(color=bar_color)))

  # Show the plot
  fig.show()

"""**Bar seaborn**"""

def bar_sea():
  import seaborn as sns
  import matplotlib.pyplot as plt

  # Set the desired color
  bar_color = 'red'

  # Create the bar plot using Seaborn
  sns.barplot(x=[x for x in range(num_rows)], y=[x for x in range(num_rows)], color=bar_color)

  # Show the plot
  plt.show()

"""**Box plotly**"""

def box_plotly():
  import plotly.graph_objs as go

  # Set the desired color
  box_color = 'rgb(134, 193, 212)'

  # Create the box plot using Plotly graph objects
  fig = go.Figure(go.Box(x=df[columns[1]], y=df[columns[2]], marker=dict(color=box_color)))

  # Show the plot
  fig.show()

"""**Box seaborn**"""

def box_sea():
  import seaborn as sns
  import matplotlib.pyplot as plt

  # Set the desired color
  box_color = 'cornflowerblue'

  # Create the box plot using Seaborn
  sns.boxplot(x=df[columns[1]], y=df[columns[2]], color=box_color)

  # Show the plot
  plt.show()

"""**Heatmap plotly**"""

def heat_plotly():
  import plotly.graph_objs as go

  # Create the heatmap using Plotly graph objects
  fig = go.Figure(data=go.Heatmap(z=df.values, x=df.columns, y=df.index))

  # Show the plot
  fig.show()

"""**Heatmap seaborn**"""

def heat_sea():
  import seaborn as sns
  import matplotlib.pyplot as plt

  # Create the heatmap using Seaborn
  sns.heatmap(df, cmap='coolwarm')

  # Show the plot
  plt.show()

"""**Pie plotly**"""

def pie_plotly():
  import plotly.graph_objs as go

  # Calculate the count for each category in the dataframe
  category_counts = df[columns[2]].value_counts()

  # Create the pie chart using Plotly graph objects
  fig = go.Figure(data=[go.Pie(labels=category_counts.index.tolist(), values=category_counts.values.tolist())])

  # Show the plot
  fig.show()

"""**Pie seaborn**"""

def pie_sea():
  import seaborn as sns
  import matplotlib.pyplot as plt

  # Calculate the count for each category in the dataframe
  category_counts = df[columns[2]].value_counts()

  # Create the pie chart using Seaborn
  plt.pie(category_counts.values.tolist(), labels=category_counts.index.tolist())

  # Show the plot
  plt.show()

"""**Polar plotly**"""

def polar_plotly():
  import plotly.graph_objs as go

  # Create the polar chart using Plotly graph objects
  fig = go.Figure(data=go.Scatterpolar(r=df['x'], theta=df['y'], mode='lines'))

  # Show the plot
  fig.show()

"""**Polar seaborn**"""

def polar_sea():
  import seaborn as sns
  import matplotlib.pyplot as plt
  # Create a radar chart using Seaborn
  sns.lineplot(data=df, x='x', y='y')

  # Show the plot
  plt.show()

"""**3D graphic plotly**"""

def plotly_3d():
  import plotly.graph_objs as go

  # Create the 3D scatter plot using Plotly graph objects
  fig = go.Figure(data=[go.Scatter3d(x=df['x'], y=df['y'], z=df['z'], mode='markers')])

  # Set the layout of the chart
  fig.update_layout(scene=dict(xaxis_title='X', yaxis_title='Y', zaxis_title='Z'))

  # Show the plot
  fig.show()

"""##Лаба 3

пользовательский интерфейс
"""

import ipywidgets as widgets
from IPython.display import display
# Создаем label
label = widgets.Label(value='DataFrame')

# Отображаем label
display(label)

# Создаем Dropdown
dropdown = widgets.Dropdown(options=columns, description='Columns')

# Отображаем Dropdown
display(dropdown)